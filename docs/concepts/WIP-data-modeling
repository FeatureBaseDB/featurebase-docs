---
Data Modeling
nav_exclude: true
---


# This excercise will help with data modeling in FeatureBase

# We'll begin with how to "key" data when ingesting into FeatureBase, in short which values from data will be used as the primary key, unqiue key, or primary entity.


# Create a table named data_modeling that has the following schema:
# _id = Primary Key (ID Type)
# unqiue_id = Secondary Unique ID
# device_name = STRING information
# total_bandwidth = Mutex INT Data
# product_type = Mutex STRING Data
# device_type = Non-Mutex STRING Data (String Arrays)
# bandwidth_channel = Non-Mutex ID Data (ID Array)


create table if not exists data_modeling (
    _id ID,
    unique_id ID,
    device_name STRING,
    total_bandwidth INT,
    product_type STRING,
    device_type STRINGSET,
    bandwidth_channel IDSET
);

# The following is generated comma delimited data for wifi devices containing general information about each.
# In the first scenario we will key on monotonically increasing ID value from 1-20, this will create 20 records with each containing one row of data.

```sql
INSERT INTO data_modeling (_id, unique_id, device_name, total_bandwidth, product_type, device_type, bandwidth_channel) VALUES
(1, 123456, 'BananaPhone', 54321, 'WiFi Router', ['Smart', 'Wireless'], [1, 6, 11]),
(2, 789012, 'ToasterBot', 98765, 'WiFi Extender', ['Powerful', 'Range','Wireless'], [2, 7, 12]),
(3, 345678, 'SockPuppet', 23456, 'WiFi Camera', ['HD', 'Night Vision','Wireless'], [3, 8, 13]),
(4, 901234, 'PogoStick', 67890, 'Smart Home Hub', ['Voice Control', 'Automation'], [4, 9, 14]),
(5, 567890, 'BubbleWrap', 12345, 'WiFi Speaker', ['Portable', 'Bluetooth','Wireless','Voice Control'], [5, 10, 15]),
(6, 234567, 'SquirrelCage', 76543, 'WiFi Thermostat', ['Programmable', 'Energy Saving','Wireless','Energy Monitoring'], [6, 11, 16]),
(7, 890123, 'RubberDucky', 32145, 'WiFi Doorbell', ['HD Video', 'Two-Way Audio'], [7, 12, 17]),
(8, 456789, 'CrazyStraw', 65432, 'WiFi Light Bulb', ['Color Changing', 'Dimmable'], [8, 13, 18]),
(9, 123123, 'PotatoLauncher', 98765, 'WiFi Security Camera', ['Motion Detection', 'Cloud Storage'], [9, 14, 19]),
(10, 321321, 'MarshmallowGun', 54321, 'Smart Plug', ['Voice Control', 'Energy Monitoring'], [10, 15, 20]),
(11, 111111, 'ToothbrushBot', 22222, 'WiFi Scale', ['Body Composition', 'Syncs Data','Wireless'], [11, 16, 21]),
(12, 222222, 'CheeseGrater', 33333, 'WiFi Vacuum Cleaner', ['Mapping', 'App Control','Wireless'], [12, 17, 22]),
(13, 333333, 'FryingPan', 44444, 'WiFi Coffee Maker', ['Programmable', 'Brew Strength','Wireless'], [13, 18, 23]),
(14, 444444, 'TeaInfuser', 55555, 'WiFi Blender', ['Variable Speed', 'Pulse Function','Wireless'], [14, 19, 24]),
(15, 555555, 'PillowFortress', 66600, 'WiFi Smart Lock', ['Keyless Entry', 'Remote Access','Wireless'], [15, 20, 25]),
(16, 908743, 'TangoMango', 543210, 'WiFi Router', ['Smart', 'Wireless'], [5, 7, 14]),
(17, 567986, 'JumboMumbo', 12300, 'WiFi Speaker', ['Portable', 'Bluetooth','Wireless','Voice Control'], [9, 11, 15]),
(18, 987421, 'ZippyFondue', 44354, 'Smart Plug', ['Voice Control', 'Energy Monitoring'], [4, 17, 20]),
(19, 128885, 'NumbPancake', 98789, 'WiFi Security Camera', ['Motion Detection', 'Cloud Storage'], [8, 11, 20]),
(20, 489112, 'WillowPunch', 666253, 'WiFi Smart Lock', ['Keyless Entry', 'Remote Access','Wireless'], [14, 15, 20]);
```

# Now that the data is inserted into our table:

# Upon running the following query:
```sql
select count(*) from data_modeling;
```

# We return a result of 20, as expected.

# Taking a look at a groupby on the device_type which is a stringset, we see results are <20 as a few of our records have identical set arrays: ['Smart', 'Wireless']
```sql
select count(*), device_type from data_modeling group by device_type;
```

# Now altering this query slightly:
```sql
select count(*), device_type from data_modeling WITH (flatten(device_type)) group by device_type;

```
# We can flatten out the array in this set field to group over the individual elements, producing 28 groupings with their respective counts,


# Now, let's ingest this same data into a new table and shift which column we key the data:

create table if not exists data_modeling_2 (
    _id STRING,
    unique_id ID,
    device_name STRING,
    total_bandwidth INT,
    product_type ID,
    device_type STRINGSET,
    bandwidth_channel IDSET
);

# Notice we now are using a STRING instead of an ID type as the primary key (_id) allowing us to use arbitrary strings found in the records.


# For this new insert statement the _id is now in the 5th ordinal position(instead of the first) and we've moved product_type to the first position.
```sql
INSERT INTO data_modeling_2 (product_type, unique_id, device_name, total_bandwidth, _id , device_type, bandwidth_channel) VALUES
(1, 123456, 'BananaPhone', 54321, 'WiFi Router', ['Smart', 'Wireless'], [1, 6, 11]),
(2, 789012, 'ToasterBot', 98765, 'WiFi Extender', ['Powerful', 'Range','Wireless'], [2, 7, 12]),
(3, 345678, 'SockPuppet', 23456, 'WiFi Camera', ['HD', 'Night Vision','Wireless'], [3, 8, 13]),
(4, 901234, 'PogoStick', 67890, 'Smart Home Hub', ['Voice Control', 'Automation'], [4, 9, 14]),
(5, 567890, 'BubbleWrap', 12345, 'WiFi Speaker', ['Portable', 'Bluetooth','Wireless','Voice Control'], [5, 10, 15]),
(6, 234567, 'SquirrelCage', 76543, 'WiFi Thermostat', ['Programmable', 'Energy Saving','Wireless','Energy Monitoring'], [6, 11, 16]),
(7, 890123, 'RubberDucky', 32145, 'WiFi Doorbell', ['HD Video', 'Two-Way Audio'], [7, 12, 17]),
(8, 456789, 'CrazyStraw', 65432, 'WiFi Light Bulb', ['Color Changing', 'Dimmable'], [8, 13, 18]),
(9, 123123, 'PotatoLauncher', 98765, 'WiFi Security Camera', ['Motion Detection', 'Cloud Storage'], [9, 14, 19]),
(10, 321321, 'MarshmallowGun', 54321, 'Smart Plug', ['Voice Control', 'Energy Monitoring'], [10, 15, 20]),
(11, 111111, 'ToothbrushBot', 22222, 'WiFi Scale', ['Body Composition', 'Syncs Data','Wireless'], [11, 16, 21]),
(12, 222222, 'CheeseGrater', 33333, 'WiFi Vacuum Cleaner', ['Mapping', 'App Control','Wireless'], [12, 17, 22]),
(13, 333333, 'FryingPan', 44444, 'WiFi Coffee Maker', ['Programmable', 'Brew Strength','Wireless'], [13, 18, 23]),
(14, 444444, 'TeaInfuser', 55555, 'WiFi Blender', ['Variable Speed', 'Pulse Function','Wireless'], [14, 19, 24]),
(15, 555555, 'PillowFortress', 66600, 'WiFi Smart Lock', ['Keyless Entry', 'Remote Access','Wireless'], [15, 20, 25]),
(16, 908743, 'TangoMango', 543210, 'WiFi Router', ['Smart', 'Wireless'], [5, 7, 14]),
(17, 567986, 'JumboMumbo', 12300, 'WiFi Speaker', ['Portable', 'Bluetooth','Wireless','Voice Control'], [9, 11, 15]),
(18, 987421, 'ZippyFondue', 44354, 'Smart Plug', ['Voice Control', 'Energy Monitoring'], [4, 17, 20]),
(19, 128885, 'NumbPancake', 98789, 'WiFi Security Camera', ['Motion Detection', 'Cloud Storage'], [8, 11, 20]),
(20, 489112, 'WillowPunch', 666253, 'WiFi Smart Lock', ['Keyless Entry', 'Remote Access','Wireless'], [14, 15, 20]);
```


# Now running the same count query: select count(*) from data_modeling_2;

# We see a result of: 15

# Curious, we ingested 20 rows of data, where did 5 of them go??

# Well since there are 2 wifi routers and 2 security camera product_types the values for those are now underneath the primary key for those types:

# Running a simple select statement will show this new distribution:
```sql
select * from data_modeling_2:
```

# Uh oh, the bandwidth_channel and device_type have extra values from both records, but the device_name only has 1 value, what happened??

# The device_name String is a mutex field while the other 2 are non-mutex set fields, meaning the record contains the most recent value for mutex fields

# Running the device_type groupby:
```sql
select count(*), device_type from data_modeling_2 group by device_type;
```

# This still returns 15, which means there are still 15 different arrays to grouping without flattening.

# So this new data model, returns correct results for one scenario but not for another in which I want to count each distinct row of original data
